<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="CCMS R3 - WEB SERVICES - DIGITAL" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="BASIC Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="projectDirLocal" elementType="Argument">
            <stringProp name="Argument.name">projectDirLocal</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="projectDir" elementType="Argument">
            <stringProp name="Argument.name">projectDir</stringProp>
            <stringProp name="Argument.value">C:\QA\ProjectsGIT\ccms_webservices_performance_ccapp-r3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENV Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="bankSign_CH" elementType="Argument">
            <stringProp name="Argument.name">bankSign_CH</stringProp>
            <stringProp name="Argument.value">CC</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="branchCode_CH" elementType="Argument">
            <stringProp name="Argument.name">branchCode_CH</stringProp>
            <stringProp name="Argument.value">CC00000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="authUser_CH" elementType="Argument">
            <stringProp name="Argument.name">authUser_CH</stringProp>
            <stringProp name="Argument.value">SPSA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankSign_EU" elementType="Argument">
            <stringProp name="Argument.name">bankSign_EU</stringProp>
            <stringProp name="Argument.value">CE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="branchCode_EU" elementType="Argument">
            <stringProp name="Argument.name">branchCode_EU</stringProp>
            <stringProp name="Argument.value">CE00000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="authUser_EU" elementType="Argument">
            <stringProp name="Argument.name">authUser_EU</stringProp>
            <stringProp name="Argument.value">CEAXXX1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankSign_UK" elementType="Argument">
            <stringProp name="Argument.name">bankSign_UK</stringProp>
            <stringProp name="Argument.value">CU</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="branchCode_UK" elementType="Argument">
            <stringProp name="Argument.name">branchCode_UK</stringProp>
            <stringProp name="Argument.value">CU00000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="authUser_UK" elementType="Argument">
            <stringProp name="Argument.name">authUser_UK</stringProp>
            <stringProp name="Argument.value">CUAXXX1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delay" elementType="Argument">
            <stringProp name="Argument.name">delay</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SYSTEM Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="hostName" elementType="Argument">
            <stringProp name="Argument.name">hostName</stringProp>
            <stringProp name="Argument.value">${__machineName}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="env" elementType="Argument">
            <stringProp name="Argument.name">env</stringProp>
            <stringProp name="Argument.value">m1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="today" elementType="Argument">
            <stringProp name="Argument.name">today</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMdd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="now" elementType="Argument">
            <stringProp name="Argument.name">now</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMdd_HHmmss,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logFolder" elementType="Argument">
            <stringProp name="Argument.name">logFolder</stringProp>
            <stringProp name="Argument.value">${projectDirLocal}\log</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dataFolder" elementType="Argument">
            <stringProp name="Argument.name">dataFolder</stringProp>
            <stringProp name="Argument.value">${projectDir}\data\CH</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numberOfUsers" elementType="Argument">
            <stringProp name="Argument.name">numberOfUsers</stringProp>
            <stringProp name="Argument.value">${__P(numberOfUsers,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">${__P(duration,5400)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loadGenNumber" elementType="Argument">
            <stringProp name="Argument.name">loadGenNumber</stringProp>
            <stringProp name="Argument.value">${__P(loadGenNumber,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="uniformDelayMillis" elementType="Argument">
            <stringProp name="Argument.name">uniformDelayMillis</stringProp>
            <stringProp name="Argument.value">${__P(uniformDelayMillis,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="throughputMultiplier" elementType="Argument">
            <stringProp name="Argument.name">throughputMultiplier</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ramp-up" elementType="Argument">
            <stringProp name="Argument.name">ramp-up</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="CALLS Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PCS_WS2I01" elementType="Argument">
            <stringProp name="Argument.name">PCS_WS2I01</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCS_WS2I04" elementType="Argument">
            <stringProp name="Argument.name">PCS_WS2I04</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCS_WS2I07" elementType="Argument">
            <stringProp name="Argument.name">PCS_WS2I07</stringProp>
            <stringProp name="Argument.value">654</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCS_WS2I12" elementType="Argument">
            <stringProp name="Argument.name">PCS_WS2I12</stringProp>
            <stringProp name="Argument.value">400</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCS_WS2I37" elementType="Argument">
            <stringProp name="Argument.name">PCS_WS2I37</stringProp>
            <stringProp name="Argument.value">401</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCS_WS2I47" elementType="Argument">
            <stringProp name="Argument.name">PCS_WS2I47</stringProp>
            <stringProp name="Argument.value">106</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCS_WS2V01" elementType="Argument">
            <stringProp name="Argument.name">PCS_WS2V01</stringProp>
            <stringProp name="Argument.value">272</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCS_WSE354" elementType="Argument">
            <stringProp name="Argument.name">PCS_WSE354</stringProp>
            <stringProp name="Argument.value">106</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCS_WS2I01_set" elementType="Argument">
            <stringProp name="Argument.name">CCS_WS2I01_set</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCS_WS2I01_remove" elementType="Argument">
            <stringProp name="Argument.name">CCS_WS2I01_remove</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCS_WS2I07" elementType="Argument">
            <stringProp name="Argument.name">CCS_WS2I07</stringProp>
            <stringProp name="Argument.value">42</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCS_WS2I08_reload" elementType="Argument">
            <stringProp name="Argument.name">CCS_WS2I08_reload</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCS_WS2I08_refund" elementType="Argument">
            <stringProp name="Argument.name">CCS_WS2I08_refund</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCS_WS2I37" elementType="Argument">
            <stringProp name="Argument.name">CCS_WS2I37</stringProp>
            <stringProp name="Argument.value">88</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCS_WSE356" elementType="Argument">
            <stringProp name="Argument.name">CCS_WSE356</stringProp>
            <stringProp name="Argument.value">54</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="B2B_WS1J04" elementType="Argument">
            <stringProp name="Argument.name">B2B_WS1J04</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="B2B_WS2I07" elementType="Argument">
            <stringProp name="Argument.name">B2B_WS2I07</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="B2B_WS2I13" elementType="Argument">
            <stringProp name="Argument.name">B2B_WS2I13</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="B2B_WS2I37" elementType="Argument">
            <stringProp name="Argument.name">B2B_WS2I37</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1D00" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1D00</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1D10" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1D10</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1J01" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1J01</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1J04" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1J04</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1J06" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1J06</stringProp>
            <stringProp name="Argument.value">40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1J08" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1J08</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1J18" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1J18</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1J20" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1J20</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1J25" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1J25</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1J33" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1J33</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS1U07" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS1U07</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS2I07" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS2I07</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS2I09" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS2I09</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS2I10" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS2I10</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS2I13" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS2I13</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS2I14" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS2I14</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS2I15" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS2I15</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS2I16" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS2I16</stringProp>
            <stringProp name="Argument.value">40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS2I17" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS2I17</stringProp>
            <stringProp name="Argument.value">40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WS2I37" elementType="Argument">
            <stringProp name="Argument.name">POCI_WS2I37</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POCI_WSE354" elementType="Argument">
            <stringProp name="Argument.name">POCI_WSE354</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS1D00" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS1D00</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS1J01" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS1J01</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS1J06" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS1J06</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS1J07" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS1J07</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I06" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I06</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I07" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I07</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I09" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I09</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I10" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I10</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I13" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I13</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I15" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I15</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I16" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I16</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I17" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I17</stringProp>
            <stringProp name="Argument.value">70</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I44" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I44</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I50" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I50</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCI_WS2I74" elementType="Argument">
            <stringProp name="Argument.name">PCI_WS2I74</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults - PREP ENV" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">ccms-ws-${env}-b.prep.corner.local</stringProp>
        <stringProp name="HTTPSampler.port">443</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults - TEST ENV" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">ccms-ws-${env}-b.ittest.corner.local</stringProp>
        <stringProp name="HTTPSampler.port">443</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${logFolder}/${__javaScript(&apos;${env}&apos;.toUpperCase())}/${hostName}/${now}/ResponseTimeGraph.csv</stringProp>
        <stringProp name="RespTimeGraph.interval">1000</stringProp>
        <stringProp name="RespTimeGraph.graphtitle">Response Time Graph</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${logFolder}/${__javaScript(&apos;${env}&apos;.toUpperCase())}/${hostName}/${now}/GraphResults.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${logFolder}/${__javaScript(&apos;${env}&apos;.toUpperCase())}/${hostName}/${now}/AggregateReport.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${logFolder}/${__javaScript(&apos;${env}&apos;.toUpperCase())}/${hostName}/${now}/SummaryReport.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${logFolder}/${__javaScript(&apos;${env}&apos;.toUpperCase())}/${hostName}/${now}/ResultsTree.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCS - WS2I01 - SetCardStatus" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I01 PCS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NUMBER,STATUS_OPERATION_TYPE,STATUS_CODE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCS_WS2I01})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCS - WS2I01 - SetCardStatus" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I01&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NUMBER}&quot;,&#xd;
	&quot;statusOperationType&quot;: &quot;${STATUS_OPERATION_TYPE}&quot;,&#xd;
	&quot;statusCode&quot;: &quot;${STATUS_CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I01</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCS - WS2I04 - GetCVV2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCS_WS2I04})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCS - WS2I04 - GetCVV2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I04&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I04</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCS - WS2I07 - GetCardDetail" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCS_WS2I07})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCS - WS2I07 - GetCardDetail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I07&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I07</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCS - WS2I12 - CardRelatedNumbersRetrieving" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCS_WS2I12})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCS - WS2I12 - CardRelatedNumbersRetrieving" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I12&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I12</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCS - WS2I37 - GetStatusManagementEffect" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCS_WS2I37})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCS - WS2I37 - GetStatusManagementEffect" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I37&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;,&#xd;
	&quot;effectCodeLIST&quot;: [		&#xd;
		{&quot;effectCode&quot;: &quot;PAM_STOP_PAR_OPER&quot;}&#xd;
	]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I37</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCS - WS2I47 - GetAdditionalCardDetail" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I47.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCS_WS2I47})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCS - WS2I47 - GetAdditionalCardDetail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I47&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I47</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">110</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCS - WS2V01 - GetValueAddedServiceList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCS_WS2V01})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCS - WS2V01 - GetValueAddedServiceList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2V01&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2V01</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCS - WSE354 - GetParametersForInterfaces" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCS_WSE354})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCS - WSE354 - GetParametersForInterfaces" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WSE354&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;paramTableNameWithAlgorithm&quot;:&quot;PRODUCT_LIST&quot;,&#xd;
	&quot;delimiter&quot;:&quot;;;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WSE354</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group CCS - WS2I01 - SetCardStatus" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I01 CCS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NUMBER,STATUS_OPERATION_TYPE,STATUS_CODE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${CCS_WS2I01_set})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CCS - WS2I01 - SetCardStatus" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I01&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NUMBER}&quot;,&#xd;
	&quot;statusOperationType&quot;: &quot;${STATUS_OPERATION_TYPE}&quot;,&#xd;
	&quot;statusCode&quot;: &quot;${STATUS_CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I01</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group CCS - WS2I07 - GetCardDetail" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${CCS_WS2I07})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CCS - WS2I07 - GetCardDetail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I07&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I07</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group CCS - WS2I08 - SetFinancialEvent" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I08.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">operationType,cardNumber,fundAccountIBAN,financialEventCurrency,financialEventAmount,paymentReferenceNumber</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${CCS_WS2I08_reload})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CCS - WS2I08 - SetFinancialEvent" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I08&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;operationType&quot;: &quot;${operationType}&quot;,&#xd;
	&quot;cardNumber&quot;: &quot;${cardNumber}&quot;,&#xd;
	&quot;fundAccountIBAN&quot;: &quot;${fundAccountIBAN}&quot;,&#xd;
	&quot;financialEventCurrency&quot;: &quot;${financialEventCurrency}&quot;,&#xd;
	&quot;financialEventAmount&quot;: &quot;${financialEventAmount}&quot;,&#xd;
	&quot;paymentReferenceNumber&quot;: &quot;${paymentReferenceNumber}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I08</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group CCS - WS2I08 - SetFinancialEvent - Reload" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\WS2I08 - Refund.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">DATA_TYPE,operationType,cardNumber,fundAccountIBAN,financialEventCurrency,financialEventAmount,customerDescription,requestFileId,requestFileCornerId,originalRequestReference,paymentReferenceNumber</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${CCS_WS2I08_reload})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CCS - WS2I08 - SetFinancialEvent - Reload" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I08&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;operationType&quot;: &quot;${operationType}&quot;,&#xd;
	&quot;cardNumber&quot;: &quot;${cardNumber}&quot;,&#xd;
	&quot;fundAccountIBAN&quot;: &quot;${fundAccountIBAN}&quot;,&#xd;
	&quot;financialEventCurrency&quot;: &quot;${financialEventCurrency}&quot;,&#xd;
	&quot;financialEventAmount&quot;: &quot;${financialEventAmount}&quot;,&#xd;
	&quot;customerDescription&quot;: &quot;${customerDescription}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I08</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group CCS - WS2I08 - SetFinancialEvent - Refund" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\WS2I08 - Refund.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">DATA_TYPE,operationType,cardNumber,fundAccountIBAN,financialEventCurrency,financialEventAmount,customerDescription,requestFileId,requestFileCornerId,originalRequestReference,paymentReferenceNumber</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${CCS_WS2I08_refund})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CCS - WS2I08 - SetFinancialEvent - Refund" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I08&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;operationType&quot;: &quot;${operationType}&quot;,&#xd;
	&quot;cardNumber&quot;: &quot;${cardNumber}&quot;,&#xd;
	&quot;fundAccountIBAN&quot;: &quot;${fundAccountIBAN}&quot;,&#xd;
	&quot;financialEventCurrency&quot;: &quot;${financialEventCurrency}&quot;,&#xd;
	&quot;financialEventAmount&quot;: &quot;${financialEventAmount}&quot;,&#xd;
	&quot;customerDescription&quot;: &quot;${customerDescription}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I08</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group CCS - WS2I37 - GetStatusManagementEffect" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${CCS_WS2I37})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CCS - WS2I37 - GetStatusManagementEffect" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I37&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;,&#xd;
	&quot;effectCodeLIST&quot;: [		&#xd;
		{&quot;effectCode&quot;: &quot;PAM_STOP_PAR_OPER&quot;}&#xd;
	]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I37</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group CCS - WSE356 - CreateServiceCase" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${CCS_WSE356})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CCS - WSE356 - CreateServiceCase" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WSE356&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;CasePersonID&quot;: &quot;${CODE}&quot;,&#xd;
	&quot;ExternalCaseType&quot;: &quot;POST_CON_ASS&quot;,&#xd;
	&quot;Status&quot;: &quot;1&quot;,&#xd;
	&quot;StatusChangeReason&quot;: &quot;000&quot;,&#xd;
	&quot;ExternalCaseID&quot;: &quot;CCAPP_${__Random(100000000000000000, 999999999999999999)}&quot;,&#xd;
	&quot;ExternalCaseSubject&quot;: &quot;ExternalCaseSubject&quot;,&#xd;
	&quot;ExternalCaseDesc&quot;: &quot;ExternalCaseDesc&quot;,&#xd;
	&quot;ExternalCaseParentCaseID&quot;: &quot;ExternalCaseParentCaseID&quot;,&#xd;
	&quot;ExternalCaseSpecificBodyContent&quot;: {&#xd;
		&quot;dummy&quot;: &quot;PERFORMANCE CORNER CARD APP&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WSE356</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group B2B - WS1J04 - GetFullAddressList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${B2B_WS1J04})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="B2B - WS1J04 - GetFullAddressList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J04&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J04</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group B2B - WS2I07 - GetCardDetail" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${B2B_WS2I07})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="B2B - WS2I07 - GetCardDetail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I07&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I07</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group B2B - WS2I13 - GetCardList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${B2B_WS2I13})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="B2B - WS2I13 - GetCardList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I13&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I13</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group B2B - WS2I37 - GetStatusManagementEffect" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${B2B_WS2I37})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="B2B - WS2I37 - GetStatusManagementEffect" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I37&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;,&#xd;
	&quot;effectCodeLIST&quot;: [		&#xd;
		{&quot;effectCode&quot;: &quot;PAM_STOP_PAR_OPER&quot;}&#xd;
	]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I37</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1D00 - GetScoringResults" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS1D00.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">PERSON_ROLE_ID,PERIOD_SCORE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1D00})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1D00 - GetScoringResults" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1D00&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personRoleId&quot;: &quot;${PERSON_ROLE_ID}&quot;,&#xd;
	&quot;periodScore&quot;: &quot;${PERIOD_SCORE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1D00</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1D10 - GetScoringResults" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS1D10.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CONTRACT_ID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1D10})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1D10 - GetScoringResults" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1D10&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;contractId&quot;: &quot;${CONTRACT_ID}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1D10</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1J01 - GetPersonDetails" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1J01})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1J01 - GetPersonDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J01&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J01</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1J04 - GetFullAddressList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1J04})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1J04 - GetFullAddressList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J04&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J04</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1J06 - GetPersonRolesSearch" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1J06})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1J06 - GetPersonRolesSearch" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J06&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personID&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J06</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1J08 - CommunicationsOverview" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS1J08.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1J01})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1J08 - CommunicationsOverview" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J08&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J08</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1J18 - GetCRIFInfo" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1J18})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1J18 - GetCRIFInfo" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J18&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;95000055&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J18</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1J20 - GetZEKIKOInfo" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS1J20.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1J20})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1J20 - GetZEKIKOInfo" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J20&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J20</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">1</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1J25 - GetPersonDocumentList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS1J25.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1J25})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1J25 - GetPersonDocumentList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J25&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J25</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1J33 - ShareholdersOverview" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS1J33.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1J33})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1J33 - ShareholdersOverview" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J33&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;95000055&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J33</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">9999</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS1U07 - GetNDLDetails" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS1U07.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">ISS_ACCOUNT_NO,NUM_OF_HYSTORICAL_DATA,PERSON_ROLE_ID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS1U07})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS1U07 - GetNDLDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1U07&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;issAccountNo&quot;: &quot;${ISS_ACCOUNT_NO}&quot;,&#xd;
	&quot;numOfHystoricalData&quot;: &quot;${NUM_OF_HYSTORICAL_DATA}&quot;,&#xd;
	&quot;personRoleId&quot;: &quot;${PERSON_ROLE_ID}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1U07</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS2I07 - GetCardDetail" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I07})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS2I07 - GetCardDetail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I07&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I07</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS2I09 - GetRelatedRoles" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I09 clientId.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CLIENT_ID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I09})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS2I09 - GetRelatedRoles" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I09&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;clientId&quot;: &quot;${CLIENT_ID}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I09</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS2I10 - GetContractList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CONTRACT_LIST.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">ISS_CON_ID,RCD,CONTRACT_NO,STATUS,SOURCE_CODE,OWNER,OWNER_NAME,PARTNER,PARTNER_NAME,ROLE,ROLE_TYPE,PARENT_ROLE,PARENT_ROLE_TYPE,ACCOUNT_NO,CARD_NO</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I10})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POCI - WS2I10 - GetContractList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I10&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;IssContractNo&quot;: &quot;${CONTRACT_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I10</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS2I13 - GetCardList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I13})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS2I13 - GetCardList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I13&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I13</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS2I14 - GetContractDetails" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I14.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">ISS_CONTRACT_NO</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I14})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS2I14 - GetContractDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I14&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;IssContractNo&quot;: &quot;${ISS_CONTRACT_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I14</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS2I15 - GetPersonRoleDetails" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - ROLES.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CUS_ROL_ID,CUS_ROL_CODE,CUST_ROLE_TYPE,CUS_ID,PARENT_CUS_ROL_ID,PILOT_FLAG,COBAFF_CUS_ACC_ID,CUS_ROL_LIFECYCLE,OPENING_DATE,CLOSING_DATE,EVE_ID,BANK_SIGN,USER_LOCK,CUS_ROL_LIFE_REASON,CHG_LIFECYCLE_DATE,COBAFF_CUS_ID,EXTERNAL_CODE,CUST_ROLE_SUBTYPE,PRINC_CUS_ROL_ID,CUS_ROLE_BIG_FLAG</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I15})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS2I15 - GetPersonRoleDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I15&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personRoleId&quot;: &quot;${CUS_ROL_CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I15</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS2I16 - GetAccountList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CONTRACT_LIST.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">ISS_CON_ID,RCD,CONTRACT_NO,STATUS,SOURCE_CODE,OWNER,OWNER_NAME,PARTNER,PARTNER_NAME,ROLE,ROLE_TYPE,PARENT_ROLE,PARENT_ROLE_TYPE,ACCOUNT_NO</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I16})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS2I16 - GetAccountList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I16&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;issContractNo&quot;: &quot;${CONTRACT_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I16</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS2I17 - GetAccountDetails" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I17})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS2I17 - GetAccountDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I17&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I17</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WS2I37 - GetStatusManagementEffect" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I37})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WS2I37 - GetStatusManagementEffect" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I37&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;,&#xd;
	&quot;effectCodeLIST&quot;: [		&#xd;
		{&quot;effectCode&quot;: &quot;PAM_STOP_PAR_OPER&quot;}&#xd;
	]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I37</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group POCI - WSE354 - GetParametersForInterfaces" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WSE354})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POCI - WSE354 - GetParametersForInterfaces" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WSE354&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;paramTableNameWithAlgorithm&quot;:&quot;PRODUCT_LIST&quot;,&#xd;
	&quot;delimiter&quot;:&quot;;;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WSE354</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS1D00 - GetScoringResults" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS1D00.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">PERSON_ROLE_ID,PERIOD_SCORE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS1D00})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS1D00 - GetScoringResults" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1D00&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personRoleId&quot;: &quot;${PERSON_ROLE_ID}&quot;,&#xd;
	&quot;periodScore&quot;: &quot;${PERIOD_SCORE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1D00</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS1J01 - GetPersonDetails" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS1J01})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS1J01 - GetPersonDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J01&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J01</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS1J06 - GetPersonRolesSearch" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS1J06})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS1J06 - GetPersonRolesSearch" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J06&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personID&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J06</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS1J07 - GetRelatedAndDependentPersons" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - ALL M1 CH PERSON.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE,NAME,TYPE_ID,TYPE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS1J07})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS1J07 - GetRelatedAndDependentPersons" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS1J07&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personID&quot;: &quot;${CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS1J07</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I06 - GetTransactionList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I06.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">ISS_ACCOUNT_NO,ISS_CYCLE_ITEM_DATE_FROM,ISS_CYCLE_ITEM_DATE_TO</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I06})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I06 - GetTransactionList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I06&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;issAccountNo&quot;: &quot;${ISS_ACCOUNT_NO}&quot;,&#xd;
	&quot;issCycleItemDateFrom&quot;: &quot;${ISS_CYCLE_ITEM_DATE_FROM}&quot;,&#xd;
	&quot;issCycleItemDateUntil&quot;: &quot;${ISS_CYCLE_ITEM_DATE_TO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I06</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I07 - GetCardDetail" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I07})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I07 - GetCardDetail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I07&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I07</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I09 - GetRelatedRoles" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I09 tenantId.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">TENANT_ID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I09})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I09 - GetRelatedRoles" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I09&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;tenantId&quot;: &quot;${TENANT_ID}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I09</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I10 - GetContractList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CONTRACT_LIST.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">ISS_CON_ID,RCD,CONTRACT_NO,STATUS,SOURCE_CODE,OWNER,OWNER_NAME,PARTNER,PARTNER_NAME,ROLE,ROLE_TYPE,PARENT_ROLE,PARENT_ROLE_TYPE,ACCOUNT_NO,CARD_NO</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${POCI_WS2I10})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" PCI - WS2I10 - GetContractList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I10&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;IssContractNo&quot;: &quot;${CONTRACT_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I10</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I13 - GetCardList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I13})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I13 - GetCardList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I13&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I13</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I15 - GetPersonRoleDetails" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - ROLES.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CUS_ROL_ID,CUS_ROL_CODE,CUST_ROLE_TYPE,CUS_ID,PARENT_CUS_ROL_ID,PILOT_FLAG,COBAFF_CUS_ACC_ID,CUS_ROL_LIFECYCLE,OPENING_DATE,CLOSING_DATE,EVE_ID,BANK_SIGN,USER_LOCK,CUS_ROL_LIFE_REASON,CHG_LIFECYCLE_DATE,COBAFF_CUS_ID,EXTERNAL_CODE,CUST_ROLE_SUBTYPE,PRINC_CUS_ROL_ID,CUS_ROLE_BIG_FLAG</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I15})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I15 - GetPersonRoleDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I15&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personRoleId&quot;: &quot;${CUS_ROL_CODE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I15</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I16 - GetAccountList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CONTRACT_LIST.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">ISS_CON_ID,RCD,CONTRACT_NO,STATUS,SOURCE_CODE,OWNER,OWNER_NAME,PARTNER,PARTNER_NAME,ROLE,ROLE_TYPE,PARENT_ROLE,PARENT_ROLE_TYPE,ACCOUNT_NO</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I16})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I16 - GetAccountList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I16&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;issContractNo&quot;: &quot;${CONTRACT_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I16</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I17 - GetAccountDetails" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - CARDS_WITH_AGREEMENTS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CARD_NO,COBAFF_CUS_ACC_ID,COBAFF_SCHEMA_CODE,CUS_CODE,CUS_ID,CODE,NAME,CUS_ACC_NO,EXT_ACCOUNT</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I17})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I17 - GetAccountDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I17&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;cardNumber&quot;: &quot;${CARD_NO}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I17</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I44 - GetFinancialRiskAssessment" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I44.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE,SCENARIO_TYPE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I44})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I44 - GetFinancialRiskAssessment" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I44&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;${CODE}&quot;,&#xd;
	&quot;scenarioType&quot;: &quot;${SCENARIO_TYPE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I44</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">58</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I50 - GetGuaranteesList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I50.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE,SCENARIO_TYPE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I50})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I50 - GetGuaranteesList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I50&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;clientId&quot;: &quot;${CLIENT_ID}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I50</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group PCI - WS2I74 - GetPersonLiabilityAndExposureData" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectDirLocal}\data\M1 CH - WS2I74.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">CODE,CALCULATE_EXPOSURE</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__groovy((${throughputMultiplier}*${PCI_WS2I74})/${loadGenNumber})}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PCI - WS2I74 - GetPersonLiabilityAndExposureData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;headerRequest&quot;: {&#xd;
		&quot;trxCode&quot;: &quot;WS2I74&quot;,&#xd;
		&quot;userID&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;trxTimeStamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;branchCode&quot;: &quot;${branchCode_CH}&quot;,&#xd;
		&quot;processDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;bankSign&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;DeliveryChannel&quot;: &quot;ESB&quot;,&#xd;
		&quot;ModuleName&quot;: &quot;DCC&quot;,&#xd;
		&quot;userLock&quot;: &quot;&quot;,&#xd;
		&quot;locale&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;requestInteroperabilityPropertyBlock&quot;: {&#xd;
		&quot;uniqueRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorRequestReference&quot;: &quot;QA_TEST_UNIQUE_REFERENCE_CODE_${__Random(1000000000, 9999999999)}&quot;,&#xd;
		&quot;requestorApplicationName&quot;: &quot;CCMS_application&quot;,&#xd;
		&quot;requestorComponentName&quot;: &quot;CCMS_componet&quot;,&#xd;
		&quot;requestorServiceName&quot;: &quot;CCMS_service&quot;,&#xd;
		&quot;requestTimestamp&quot;: &quot;${trxTimeStamp}&quot;,&#xd;
		&quot;requestTimeZone&quot;: &quot;UTC&quot;,&#xd;
		&quot;requestTimeZoneOffset&quot;: &quot;+01&quot;,&#xd;
		&quot;requestorOrganization&quot;: &quot;Corner&quot;,&#xd;
		&quot;requestorCompany&quot;: &quot;Cornercard&quot;,&#xd;
		&quot;requestorSubsidiary&quot;: &quot;${bankSign_CH}&quot;,&#xd;
		&quot;requestorOrganizationalUnit&quot;: &quot;Bedano&quot;,&#xd;
		&quot;requestorAuthenticationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorAuthorizationUser&quot;: &quot;${authUser_CH}&quot;,&#xd;
		&quot;requestorIP&quot;: &quot;127.0.0.1&quot;,&#xd;
		&quot;requestChannel&quot;: &quot;Intranet&quot;,&#xd;
		&quot;responseChannel&quot;: &quot;Intranet&quot;&#xd;
	},&#xd;
	&quot;personId&quot;: &quot;${CODE}&quot;,&#xd;
	&quot;calculateExposure&quot;: &quot;${CALCULATE_EXPOSURE}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rest/service/WS2I74</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-977541028">trxTimeStamp</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-935016659">
                <stringProp name="-609911489">${__time(yyyy-MM-dd HH:mm:ss.SSS,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.headerResponse.Return_Code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
